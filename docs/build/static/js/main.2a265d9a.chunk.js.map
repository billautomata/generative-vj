{"version":3,"sources":["logo.svg","webpack:///./src/logo.svg?515f","generateFragmentShader.js","Interface.js","App.js","reportWebVitals.js","index.js"],"names":["Interface","props","svgRef","React","createRef","state","shaderLines","matchingCodeLines","bitRate","geneSize","bits","d3","map","o","Math","random","convertBits","bind","bytes","i","bitArray","offset","push","parseInt","join","this","console","log","svg","current","attr","window","innerHeight","gridSize","floor","sqrt","length","boxSize","g","append","drag","dragFlipped","on","event","x","index","y","select","fns","setDNA","data","shaderInit","generateFragmentShader","setState","call","forEach","bit","bitIndex","rect","geneIndex","metadata","getLineMetaData","idx","matchingResults","filter","begin","end","setTimeout","split","lineIdx","onClick","p","lineBegin","undefined","n","rectIndex","onMouseOver","selectAll","style","outline","indexOf","cursor","position","top","left","opacity","backgroundColor","width","ref","right","padding","color","fontFamily","whiteSpace","Component","linesLength","currentDNAIndex","dna","lineMetaData","functions","name","args","operatorsAssign","operatorsSimple","values","constantValues","createLineDNA","thisLineMetaData","leftGene","operatorGene","functionGene","valueLengthGene","valueGenes","rDNA","createCompoundValueDNA","genes","pop","arr","value","lines","displayLines","line","lineIndex","options","d","App","counter","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","element","canvas","gl","buffer","fragment_shader","currentProgram","vertex_position","timeLocation","resolutionLocation","parameters","start_time","Date","getTime","time","screenWidth","screenHeight","init","fragmentShader","document","querySelector","getContext","error","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertex","fragment","program","createProgram","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","attachShader","deleteShader","linkProgram","getProgramParameter","LINK_STATUS","alert","VALIDATE_STATUS","getError","getUniformLocation","src","type","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","animate","clientWidth","height","clientHeight","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","uniform1f","uniform2f","vertexAttribPointer","FLOAT","enableVertexAttribArray","drawArrays","TRIANGLES","disableVertexAttribArray","render","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a265d9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#61DAFB\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 420.9,\n  cy: 296.5,\n  r: 45.7\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M520.5 78.1z\"\n}));\n\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 841.9 595.3\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";\nexport { ForwardRef as ReactComponent };","let compoundArgumentsLength = 6\nlet genesLength = 128\nlet linesLength = 24\n\nlet currentDNAIndex = 0\nlet dna = []\nlet lineMetaData = []\n\nfor (let i = 0; i < genesLength; i++) {\n  dna.push(Math.floor(Math.random()*12))\n}\n\nconst functions = [\n  { name: '', args: 1 }, \n  { name: 'sin', args: 1 },\n  { name: 'cos', args: 1 },\n  // { name: 'tan', args: 1 },\n  { name: 'abs', args: 1 },\n  { name: 'fract', args: 1 }\n]\n\nconst operatorsAssign = [\n  { name: '+=' },\n  { name: '-=' },\n  { name: '*=' },\n  // { name: '=' },\n  // { name: '/=' }\n]\n\nconst operatorsSimple = [\n  { name: '*' },\n  { name: '+' },\n  { name: '-' },\n  { name: '/' }\n]\n\nconst values = [\n  { name: 'red' },\n  { name: 'green' },\n  { name: 'blue' },\n  { name: 'timeMulti' },\n]\n\nconst constantValues = [\n  { name: 'position.x' },\n  { name: 'position.y' },\n  { name: 'time' },\n  { name: 'time2' },\n  { name: 'time*timeMulti' },\n  { name: 'time/timeMulti' },\n  { name: 'distanceToCenter' },\n  { name: 'distanceToBottomLeft' },\n  { name: 'distanceToBottomRight' },\n  { name: 'distanceToTopLeft' },\n  { name: 'distanceToTopRight' },\n  { name: 'red' },\n  { name: 'green' },\n  { name: 'blue' },\n]\n\nfunction createLineDNA() {\n\n  const thisLineMetaData = {\n    begin: currentDNAIndex,\n    end: -1\n  }  \n\n  const leftGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  const operatorGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  const functionGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  \n  let valueLengthGene = (dna[currentDNAIndex] % compoundArgumentsLength) + 1\n  if(valueLengthGene % 2 === 0) {\n    valueLengthGene += 1\n  }\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log('value length gene', valueLengthGene)\n  const valueGenes = []\n  for(let i = 0; i < valueLengthGene; i++) {\n    valueGenes.push(dna[currentDNAIndex])\n    currentDNAIndex++\n    thisLineMetaData.end = currentDNAIndex -1\n    currentDNAIndex = currentDNAIndex % dna.length\n  }\n\n  lineMetaData.push(thisLineMetaData)\n\n  return [\n    rDNA(values, leftGene).name,\n    rDNA(operatorsAssign, operatorGene).name,\n    rDNA(functions, functionGene).name + '(',\n    createCompoundValueDNA(valueGenes),\n    ');'\n  ].join(' ')\n}\n\nfunction createCompoundValueDNA(genes) {\n  let geneIndex = 0\n  const values = []\n  // console.log('genes length', genes.length)\n  while(genes.length > 0) {\n    if(genes.length >= 2) {\n      values.push(\n        [\n          rDNA(constantValues,genes.pop()).name, \n          rDNA(operatorsSimple,genes.pop()).name\n        ].join(' ')\n      )\n    } else {\n      values.push(rDNA(constantValues, genes.pop()).name)\n    }  \n  }\n  return values.join(' ')\n}\n\nfunction rDNA(arr, value) {\n  // console.log('array length', arr.length, 'asked index', value, 'computed index', value%arr.length)\n  return arr[value%(arr.length)]\n}\n\nfunction resetLineMetaData () {\n  lineMetaData = []\n}\n\nfunction generateFragmentShader() {\n  currentDNAIndex = 0\n  resetLineMetaData()\n\n  const lines = []\n  lines.push('uniform float time;')\n  lines.push('uniform vec2 resolution;')\n  lines.push('void main ( void ) {')\n  lines.push('vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;')\n  lines.push('vec2 centerPosition = vec2(resolution.x*0.5, resolution.y*0.5);')\n  lines.push('float distanceToCenter = (1.0/resolution.x) * 3.14 * distance(gl_FragCoord.xy, centerPosition);')\n  lines.push('float distanceToTopLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,0));')\n  lines.push('float distanceToTopRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(resolution.x,0));')\n  lines.push('float distanceToBottomLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,resolution.y));')\n  lines.push('float distanceToBottomRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, resolution.xy);')  \n  lines.push('float timeMulti = 0.0;')\n  lines.push('float time2 = time * 0.1;')\n  lines.push('float red = 0.0;')\n  lines.push('float green = 0.0;')\n  lines.push('float blue = 0.0;')\n\n  lineMetaData.lineBegin = lines.length\n\n  for(let i = 0; i < linesLength; i++) {\n    lines.push(createLineDNA())\n  }\n\n  lines.push('gl_FragColor = vec4( red, green, blue, 1.0 );')\n  lines.push('}')\n\n  const displayLines = []\n  lines.forEach((line,lineIndex)=>{\n    displayLines.push([lineIndex,line].join('\\t'))\n  })\n  // console.log(displayLines.join('\\n'))\n  // console.log(lineMetaData)\n\n  return lines.join('\\n')\n\n}\n\nfunction setDNA(options) {\n  dna = []\n  currentDNAIndex = 0\n  options.data.forEach(d=>{\n    dna.push(d)\n  })\n}\nfunction configure(options) {\n  linesLength = options.linesLength\n}\nfunction getLineMetaData() {\n  return lineMetaData\n}\n\nexport {\n  configure,\n  generateFragmentShader,\n  setDNA,\n  getLineMetaData\n}","import React from 'react'\nimport * as d3 from 'd3'\nimport { svg } from 'd3'\n\nexport default class Interface extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.svgRef = React.createRef()\n    this.state = {\n      shaderLines: '',\n      matchingCodeLines: []\n    }\n    this.bitRate = 4\n    this.geneSize = 128\n    this.bits = d3.range(this.bitRate * this.geneSize).map(o=>{\n      // return 0\n      return Math.random() > 0.5 ? 1 : 0\n    })\n    // console.log(this.props, 'props')\n    this.convertBits = this.convertBits.bind(this)\n    // console.log(d3.drag)\n  }\n\n  convertBits () {\n    const bytes = []\n    for(let i = 0; i < this.geneSize*this.bitRate; i+=this.bitRate) {\n      const bitArray = d3.range(this.bitRate).map(offset=>{ return this.bits[i+offset] })\n      // console.log(bitArray)\n      bytes.push(parseInt(bitArray.join(''),2))\n    }\n    // console.log('bytes', bytes)\n    return bytes\n  }\n\n  componentDidMount () {\n    console.log('interface mounted')\n    const svg = d3.select(this.svgRef.current)\n      .attr('viewBox', '-5 -5 110 110')\n      .attr('width', window.innerHeight*0.8)\n    const gridSize = Math.floor(Math.sqrt(this.bits.length)) \n    const boxSize = 100 / gridSize\n    const g = svg.append('g')\n    const drag = d3.drag()\n    \n    let dragFlipped = []\n    drag.on('drag', (event)=>{\n      // console.log('drag event', event.x, event.y)\n      const x = Math.floor(event.x / boxSize)\n      const y = Math.floor(event.y / boxSize)\n      const index = (y*gridSize) + x\n      // console.log(x,y)\n      // if(dragFlipped.indexOf(index) === -1) {\n      if(dragFlipped[dragFlipped.length-1] !== index) {\n        dragFlipped.push(index)\n        if(this.bits[index] === 1) {\n          this.bits[index] = 0\n        } else {\n          this.bits[index] = 1\n        }\n        g.select('rect#_'+index).attr('fill', this.bits[index] === 1 ? 'white' : 'black')      \n        this.props.fns.setDNA({data:this.convertBits()})\n        window.shaderInit(this.props.fns.generateFragmentShader())    \n        this.setState({\n          shaderLines: this.props.fns.generateFragmentShader()\n        })    \n      }\n    })\n    \n    drag.on('start', (event)=>{\n      dragFlipped = []\n    })\n    g.call(drag)\n\n    // generate rectangles\n    let x = 0\n    let y = 0\n    this.bits.forEach((bit,bitIndex)=>{     \n      y = Math.floor(bitIndex / gridSize) \n      x = bitIndex - (y*gridSize)\n      const rect = g.append('rect').attr('id', '_'+bitIndex)\n        .attr('x',x*boxSize).attr('y',y*boxSize)\n        .attr('width', boxSize).attr('height', boxSize)\n        .attr('fill', bit === 1 ? 'white' : 'black')      \n        // .attr('stroke','green')\n        .attr('stroke-width','0.5px')\n\n      rect.on('mouseover', ()=>{      \n        const geneIndex = Math.floor(bitIndex / this.bitRate)\n        console.log('Gene index', geneIndex)\n        const metadata = this.props.fns.getLineMetaData().map((o,idx)=>{o.idx = idx; return o})        \n        console.log(metadata)\n        const matchingResults = metadata.filter(o=>{ return geneIndex >= o.begin && geneIndex <= o.end })\n        console.log(matchingResults)\n\n        this.setState({\n          matchingCodeLines: matchingResults.map(o=>{return o.idx})\n        })\n\n      })\n\n      rect.on('click', ()=>{\n        return\n        if(this.bits[bitIndex] === 1){\n          this.bits[bitIndex] = 0\n        } else {\n          this.bits[bitIndex] = 1\n        }\n        // convertBits\n        // this.props.setDNA({ data: this.bits })\n        // this.convertBits()\n        rect.attr('fill', this.bits[bitIndex] === 1 ? 'white' : 'black')      \n        this.props.fns.setDNA({data:this.convertBits()})\n        window.shaderInit(this.props.fns.generateFragmentShader())\n      })\n      x += 1\n      if(x > gridSize) {\n        y += 1\n        x = 0\n      }  \n    })\n\n    setTimeout(()=>{\n      this.props.fns.setDNA({data:this.convertBits()})\n      window.shaderInit(this.props.fns.generateFragmentShader())\n      this.setState({\n        shaderLines: this.props.fns.generateFragmentShader()\n      })  \n    },10)\n  }\n\n  render () {\n    const metadata = this.props.fns.getLineMetaData()\n    const shaderLines = this.state.shaderLines.split('\\n').map((o,lineIdx)=>{\n      return (\n        <div \n        onClick={ () => {\n          const p = metadata[lineIdx - metadata.lineBegin]\n          // console.log(p)\n          if(p === undefined) {\n            return\n          }\n          if(p.end > p.begin) {\n            const svg = d3.select(this.svgRef.current)\n            d3.range((p.end-p.begin)*this.bitRate).forEach(n=>{\n              console.log(n, p.begin, n+(p.begin*this.bitRate))\n              const rectIndex = (n+(p.begin*this.bitRate))\n              this.bits[rectIndex] = Math.random() > 0.5 ? 1 : 0                \n              svg.select('rect#_'+rectIndex) .attr('fill', this.bits[rectIndex] === 1 ? 'white' : 'black')   \n            })\n            this.props.fns.setDNA({data:this.convertBits()})\n            window.shaderInit(this.props.fns.generateFragmentShader())    \n            this.setState({\n              shaderLines: this.props.fns.generateFragmentShader()\n            })        \n          } else {\n            console.log('wrap around issue')\n          }\n\n        } }\n        onMouseOver={ () => { \n          // console.log(metadata.lineBegin, lineIdx)\n          this.setState({\n            matchingCodeLines: [lineIdx - metadata.lineBegin]\n          })\n          d3.select(this.svgRef.current).selectAll('rect').attr('stroke', 'none')\n          const p = metadata[lineIdx - metadata.lineBegin]\n          // console.log(p)\n          if(p === undefined) {\n            return\n          }\n          if(p.end > p.begin) {\n            d3.range((p.end-p.begin)*this.bitRate).forEach(n=>{\n              console.log(n, p.begin, n+(p.begin*this.bitRate))\n              const rectIndex = (n+(p.begin*this.bitRate)) \n              d3.select(this.svgRef.current).select('rect#_'+rectIndex).attr('stroke', 'orange')\n            })\n          } else {\n            console.log('wrap around issue')\n          }\n        } }\n        style={{\n          outline: this.state.matchingCodeLines.indexOf(lineIdx - metadata.lineBegin) !== -1 ? '1px solid white' : null,\n          cursor: 'pointer'\n        }}>\n          {o}\n        </div>\n      )\n    })\n\n    return (\n      <>\n      <div style={{ position: 'absolute', top: 0, left: 0, opacity: 1, backgroundColor: 'rgba(0,0,0,0)', width: '100%' }}>\n        <svg ref={this.svgRef}/>\n      </div>\n      <div style={{ position: 'absolute', top: 0, right: 0, opacity: 1, backgroundColor: 'rgba(0,0,0,0)', width: '50%' }}>\n        <div style={{\n          padding: '10px',\n          color: '#333', \n          fontFamily: 'monospace', \n          whiteSpace: 'nowrap', \n          backgroundColor: 'rgba(255,255,255,0.6)'}}>\n          {shaderLines}\n        </div>\n      </div> \n      </>\n    )\n  }\n}","import React from 'react'\nimport logo, { ReactComponent } from './logo.svg';\nimport './App.css';\nimport Interface from './Interface.js'\n\nimport * as d3 from 'd3'\n\nimport { generateFragmentShader, setDNA, getLineMetaData } from './generateFragmentShader.js'\n\nlet shaderInit \n\nconst vertexShader = `\n\nattribute vec3 position;\nvoid main() {\n  gl_Position = vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\n\nuniform float time;\nuniform vec2 resolution; \nvoid main( void ) { \n  vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;\n  float red = abs( sin( position.x * position.y + time / 5.0 ) );\n  float green = abs( sin( position.x * position.y + time / 4.0 ) );\n  float blue = abs( sin( position.x * position.y + time / 3.0 ) );\n  gl_FragColor = vec4( red, green, blue, 1.0 );\n} \n`\n\nconst emptyFragmentShader = `\n\nuniform float time;\nuniform float time2;\nuniform vec2 resolution; \nvoid main( void ) { \n  gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n} \n`\n\nconst fragmentShader2 = `\n\nuniform float time;\nuniform vec2 resolution; \nvoid main( void ) { \n  vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;\n  float red = abs( sin( position.x * position.y + time / .10 ) );\n  float green = abs( sin( position.x * position.y + time / .30 ) );\n  float blue = abs( sin( position.x * position.y + time / .20 ) );\n  gl_FragColor = vec4( red, green, blue, 1.0 );\n} \n`\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n  }\n\n  componentDidMount () {\n\n    let counter = 0\n    window.requestAnimationFrame = window.requestAnimationFrame || ( function() {\n\n      return  window.webkitRequestAnimationFrame ||\n              window.mozRequestAnimationFrame ||\n              window.oRequestAnimationFrame ||\n              window.msRequestAnimationFrame ||\n              function(  callback, element ) {\n                window.setTimeout( callback, 1000 / 60 );\n              };\n\n    })();\n\n    var canvas, \n        gl, \n        buffer, \n        vertex_shader, fragment_shader, \n        currentProgram,\n        vertex_position,\n        timeLocation,\n        resolutionLocation,\n        parameters = {  start_time  : new Date().getTime(), \n                        time        : 0, \n                        screenWidth : 0, \n                        screenHeight: 0 };\n\n    init(emptyFragmentShader);\n    animate();\n\n    function init(fragmentShader) {\n\n      // console.log(fragmentShader)\n\n      vertex_shader = vertexShader\n      fragment_shader = fragmentShader\n\n      canvas = document.querySelector( 'canvas' );\n\n      // Initialise WebGL\n\n      try {\n\n        gl = canvas.getContext( 'experimental-webgl' );\n\n      } catch( error ) { }\n\n      if ( !gl ) {\n\n        throw \"cannot create webgl context\";\n\n      }\n\n      // Create Vertex buffer (2 triangles)\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n      gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( [ - 1.0, - 1.0, 1.0, - 1.0, - 1.0, 1.0, 1.0, - 1.0, 1.0, 1.0, - 1.0, 1.0 ] ), gl.STATIC_DRAW );\n\n      // Create Program\n\n      currentProgram = createProgram( vertex_shader, fragment_shader );\n      parameters.start_time = new Date().getTime()\n      timeLocation = gl.getUniformLocation( currentProgram, 'time' );\n      resolutionLocation = gl.getUniformLocation( currentProgram, 'resolution' );\n\n    }\n\n    window.shaderInit = init\n\n    function createProgram( vertex, fragment ) {\n\n      var program = gl.createProgram();\n\n      var vs = createShader( vertex, gl.VERTEX_SHADER );\n      var fs = createShader( '#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\n' + fragment, gl.FRAGMENT_SHADER );\n\n      if ( vs == null || fs == null ) { \n        console.log(vs,fs)\n        return null;\n      }\n\n      // console.log(vs)\n\n      gl.attachShader( program, vs );\n      gl.attachShader( program, fs );\n\n      gl.deleteShader( vs );\n      gl.deleteShader( fs );\n\n      gl.linkProgram( program );\n\n      if ( !gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\n\n        alert( \"ERROR:\\n\" +\n        \"VALIDATE_STATUS: \" + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + \"\\n\" +\n        \"ERROR: \" + gl.getError() + \"\\n\\n\" +\n        \"- Vertex Shader -\\n\" + vertex + \"\\n\\n\" +\n        \"- Fragment Shader -\\n\" + fragment );\n\n        return null;\n\n      }\n\n      return program;\n\n    }\n\n    function createShader( src, type ) {\n\n      var shader = gl.createShader( type );\n\n      gl.shaderSource( shader, src );\n      gl.compileShader( shader );\n\n      if ( !gl.getShaderParameter( shader, gl.COMPILE_STATUS ) ) {\n\n        alert( ( type == gl.VERTEX_SHADER ? \"VERTEX\" : \"FRAGMENT\" ) + \" SHADER:\\n\" + gl.getShaderInfoLog( shader ) );\n        return null;\n\n      }\n\n      return shader;\n\n    }\n\n    function resizeCanvas( event ) {\n\n      if ( canvas.width != canvas.clientWidth ||\n         canvas.height != canvas.clientHeight ) {\n\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n\n        parameters.screenWidth = canvas.width;\n        parameters.screenHeight = canvas.height;\n\n        gl.viewport( 0, 0, canvas.width, canvas.height );\n\n      }\n\n    }\n\n    function animate() {\n\n      resizeCanvas();      \n      render();\n\n      counter += 1\n      if(counter > 3000000000) {\n        counter = 0\n        setDNA({data: d3.range(128).map(o=>{return Math.floor(Math.random()*12)}) })\n        init(generateFragmentShader())\n        parameters.start_time = new Date().getTime()\n      }\n\n      requestAnimationFrame( animate );\n\n    }\n\n    function render() {\n      \n      if ( !currentProgram ) return;\n\n      parameters.time = new Date().getTime() - parameters.start_time;\n\n      gl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT );\n\n      // Load program into GPU\n\n      gl.useProgram( currentProgram );\n\n      // Set values to program variables\n\n      gl.uniform1f( timeLocation, parameters.time / 1000 );\n      gl.uniform2f( resolutionLocation, parameters.screenWidth, parameters.screenHeight );\n\n      // Render geometry\n\n      gl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n      gl.vertexAttribPointer( vertex_position, 2, gl.FLOAT, false, 0, 0 );\n      gl.enableVertexAttribArray( vertex_position );\n      gl.drawArrays( gl.TRIANGLES, 0, 6 );\n      gl.disableVertexAttribArray( vertex_position );\n\n    }    \n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n         <canvas></canvas>\n        <Interface fns={{generateFragmentShader, setDNA, shaderInit, getLineMetaData}}/>\n      </div>\n    );\n  }\n\n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}