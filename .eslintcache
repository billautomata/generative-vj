[{"/Users/bill/webgl-vj-generative/src/index.js":"1","/Users/bill/webgl-vj-generative/src/App.js":"2","/Users/bill/webgl-vj-generative/src/reportWebVitals.js":"3","/Users/bill/webgl-vj-generative/src/generateFragmentShader.js":"4","/Users/bill/webgl-vj-generative/src/Interface.js":"5","/Users/bill/webgl-vj-generative/src/Shader.js":"6"},{"size":500,"mtime":1611016938116,"results":"7","hashOfConfig":"8"},{"size":1663,"mtime":1612398393516,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611016938117,"results":"10","hashOfConfig":"8"},{"size":5971,"mtime":1612221331189,"results":"11","hashOfConfig":"8"},{"size":10399,"mtime":1612398860709,"results":"12","hashOfConfig":"8"},{"size":6505,"mtime":1612397786511,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1z0qm92",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/bill/webgl-vj-generative/src/index.js",[],["28","29"],"/Users/bill/webgl-vj-generative/src/App.js",["30","31"],"/Users/bill/webgl-vj-generative/src/reportWebVitals.js",[],"/Users/bill/webgl-vj-generative/src/generateFragmentShader.js",["32"],"let compoundArgumentsLength = 1\nlet genesLength = 128\nlet linesLength = 24\n\nlet currentDNAIndex = 0\nlet dna = []\nlet lineMetaData = []\n\nfor (let i = 0; i < genesLength; i++) {\n  dna.push(Math.floor(Math.random()*12))\n}\n\nconst sourceConfig = {\n  functions: [\n    { name: '', args: 1 }, \n    { name: 'sin', args: 1 },\n    { name: 'cos', args: 1 },\n    { name: 'tan', args: 1 },\n    { name: 'abs', args: 1 },\n    { name: 'fract', args: 1 }\n  ],\n  operatorsAssign: [\n    { name: '+=' },\n    { name: '-=' },\n    { name: '*=' },\n    { name: '=' },\n    { name: '/=' }\n  ],\n  operatorsSimple: [\n    { name: '*' },\n    { name: '+' },\n    { name: '-' },\n    { name: '/' }\n  ],\n  values: [\n    { name: 'red' },\n    { name: 'green' },\n    { name: 'blue' },\n    { name: 'timeMulti' },\n  ],\n  constantValues: [\n    { name: 'position.x' },\n    { name: 'position.y' },\n    { name: 'time' },\n    { name: 'time2' },\n    { name: 'time*timeMulti' },\n    { name: 'time/timeMulti' },\n    { name: 'distanceToCenter' },\n    { name: 'distanceToBottomLeft' },\n    { name: 'distanceToBottomRight' },\n    { name: 'distanceToTopLeft' },\n    { name: 'distanceToTopRight' },\n    { name: 'red' },\n    { name: 'green' },\n    { name: 'blue' },\n    { name: 'sin(time*0.001)'}\n  ]\n}\n\nlet functions = JSON.parse(JSON.stringify(sourceConfig.functions))\nlet operatorsAssign = JSON.parse(JSON.stringify(sourceConfig.operatorsAssign))\nlet operatorsSimple = JSON.parse(JSON.stringify(sourceConfig.operatorsSimple))\nlet values = JSON.parse(JSON.stringify(sourceConfig.values))\nlet constantValues = JSON.parse(JSON.stringify(sourceConfig.constantValues))\n\nfunction createLineDNA() {\n\n  const thisLineMetaData = {\n    begin: currentDNAIndex,\n    end: -1\n  }  \n\n  const leftGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  const operatorGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  const functionGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  \n  let valueLengthGene = (dna[currentDNAIndex] % compoundArgumentsLength) + 1\n  if(valueLengthGene % 2 === 0) {\n    valueLengthGene += 1\n  }\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log('value length gene', valueLengthGene)\n  const valueGenes = []\n  for(let i = 0; i < valueLengthGene; i++) {\n    valueGenes.push(dna[currentDNAIndex])\n    currentDNAIndex++\n    thisLineMetaData.end = currentDNAIndex \n    currentDNAIndex = currentDNAIndex % dna.length\n  }\n\n  lineMetaData.push(thisLineMetaData)\n\n  return [\n    rDNA(values, leftGene).name,\n    rDNA(operatorsAssign, operatorGene).name,\n    rDNA(functions, functionGene).name + '(',\n    createCompoundValueDNA(valueGenes),\n    ');'\n  ].join(' ')\n}\n\nfunction createCompoundValueDNA(genes) {\n  let geneIndex = 0\n  const values = []\n  // console.log('genes length', genes.length)\n  while(genes.length > 0) {\n    if(genes.length >= 2) {\n      values.push(\n        [\n          rDNA(constantValues,genes.pop()).name, \n          rDNA(operatorsSimple,genes.pop()).name\n        ].join(' ')\n      )\n    } else {\n      values.push(rDNA(constantValues, genes.pop()).name)\n    }  \n  }\n  return values.join(' ')\n}\n\nfunction rDNA(arr, value) {\n  // console.log('array length', arr.length, 'asked index', value, 'computed index', value%arr.length)\n  return arr[value%(arr.length)]\n}\n\nfunction resetLineMetaData () {\n  lineMetaData = []\n}\n\nfunction generateFragmentShader() {\n  currentDNAIndex = 0\n  resetLineMetaData()\n\n  const lines = []\n  lines.push('uniform float time;')\n  lines.push('uniform vec2 resolution;')\n  lines.push('void main ( void ) {')\n  lines.push('vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;')\n  lines.push('vec2 centerPosition = vec2(resolution.x*0.5, resolution.y*0.5);')\n  lines.push('float distanceToCenter = (1.0/resolution.x) * 3.14 * distance(gl_FragCoord.xy, centerPosition);')\n  lines.push('float distanceToTopLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,0));')\n  lines.push('float distanceToTopRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(resolution.x,0));')\n  lines.push('float distanceToBottomLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,resolution.y));')\n  lines.push('float distanceToBottomRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, resolution.xy);')  \n  lines.push('float timeMulti = 0.0;')\n  lines.push('float time2 = time * 0.1;')\n  lines.push('float red = 0.0;')\n  lines.push('float green = 0.0;')\n  lines.push('float blue = 0.0;')\n\n  lineMetaData.lineBegin = lines.length\n\n  for(let i = 0; i < linesLength; i++) {\n    lines.push(createLineDNA())\n  }\n\n  lines.push('gl_FragColor = vec4( red, green, blue, 1.0 );')\n  lines.push('}')\n\n  const displayLines = []\n  lines.forEach((line,lineIndex)=>{\n    displayLines.push([lineIndex,line].join('\\t'))\n  })\n  // console.log(displayLines.join('\\n'))\n  // console.log(lineMetaData)\n\n  return lines.join('\\n')\n\n}\n\nfunction setDNA(options) {\n  dna = []\n  currentDNAIndex = 0\n  options.data.forEach(d=>{\n    dna.push(d)\n  })\n}\nfunction configure(options) {\n  linesLength = options.linesLength\n}\nfunction getLineMetaData() {\n  return lineMetaData\n}\nfunction getConfig () {\n  return {\n    linesLength,\n    functions,\n    operatorsAssign,\n    operatorsSimple,\n    values,\n    constantValues\n  }\n}\nfunction setConfig (config) {\n  linesLength = config.linesLength\n  functions = JSON.parse(JSON.stringify(config.functions))\n  operatorsAssign = JSON.parse(JSON.stringify(config.operatorsAssign))\n  operatorsSimple = JSON.parse(JSON.stringify(config.operatorsSimple))\n  values = JSON.parse(JSON.stringify(config.values))\n  constantValues = JSON.parse(JSON.stringify(config.constantValues))\n}\n\nexport {\n  configure,\n  generateFragmentShader,\n  setDNA,\n  getLineMetaData,\n  getConfig,\n  setConfig\n}","/Users/bill/webgl-vj-generative/src/Interface.js",["33","34","35","36","37","38","39","40","41","42","43","44","45","46","47"],"/Users/bill/webgl-vj-generative/src/Shader.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":7,"column":3,"nodeType":"75","messageId":"76","endLine":7,"endColumn":7},{"ruleId":"77","severity":1,"message":"78","line":52,"column":3,"nodeType":"79","messageId":"80","endLine":54,"endColumn":4},{"ruleId":"73","severity":1,"message":"81","line":113,"column":7,"nodeType":"75","messageId":"76","endLine":113,"endColumn":16},{"ruleId":"73","severity":1,"message":"82","line":6,"column":3,"nodeType":"75","messageId":"76","endLine":6,"endColumn":6},{"ruleId":"73","severity":1,"message":"83","line":6,"column":16,"nodeType":"75","messageId":"76","endLine":6,"endColumn":27},{"ruleId":"73","severity":1,"message":"84","line":7,"column":14,"nodeType":"75","messageId":"76","endLine":7,"endColumn":24},{"ruleId":"73","severity":1,"message":"85","line":8,"column":3,"nodeType":"75","messageId":"76","endLine":8,"endColumn":7},{"ruleId":"73","severity":1,"message":"86","line":8,"column":9,"nodeType":"75","messageId":"76","endLine":8,"endColumn":19},{"ruleId":"73","severity":1,"message":"87","line":8,"column":21,"nodeType":"75","messageId":"76","endLine":8,"endColumn":32},{"ruleId":"73","severity":1,"message":"88","line":15,"column":10,"nodeType":"75","messageId":"76","endLine":15,"endColumn":25},{"ruleId":"73","severity":1,"message":"89","line":16,"column":10,"nodeType":"75","messageId":"76","endLine":16,"endColumn":24},{"ruleId":"73","severity":1,"message":"90","line":16,"column":26,"nodeType":"75","messageId":"76","endLine":16,"endColumn":35},{"ruleId":"73","severity":1,"message":"91","line":16,"column":37,"nodeType":"75","messageId":"76","endLine":16,"endColumn":47},{"ruleId":"73","severity":1,"message":"92","line":16,"column":49,"nodeType":"75","messageId":"76","endLine":16,"endColumn":59},{"ruleId":"73","severity":1,"message":"93","line":16,"column":61,"nodeType":"75","messageId":"76","endLine":16,"endColumn":68},{"ruleId":"73","severity":1,"message":"94","line":85,"column":11,"nodeType":"75","messageId":"76","endLine":85,"endColumn":19},{"ruleId":"95","severity":1,"message":"96","line":188,"column":9,"nodeType":"97","messageId":"98","endLine":198,"endColumn":52},{"ruleId":"99","severity":1,"message":"100","line":234,"column":15,"nodeType":"101","messageId":"102","endLine":234,"endColumn":51,"fix":"103"},{"ruleId":"73","severity":1,"message":"83","line":5,"column":3,"nodeType":"75","messageId":"76","endLine":5,"endColumn":14},{"ruleId":"73","severity":1,"message":"104","line":6,"column":3,"nodeType":"75","messageId":"76","endLine":6,"endColumn":12},{"ruleId":"73","severity":1,"message":"84","line":6,"column":14,"nodeType":"75","messageId":"76","endLine":6,"endColumn":24},{"ruleId":"73","severity":1,"message":"85","line":7,"column":3,"nodeType":"75","messageId":"76","endLine":7,"endColumn":7},{"ruleId":"73","severity":1,"message":"86","line":7,"column":9,"nodeType":"75","messageId":"76","endLine":7,"endColumn":19},{"ruleId":"73","severity":1,"message":"87","line":7,"column":21,"nodeType":"75","messageId":"76","endLine":7,"endColumn":32},{"ruleId":"73","severity":1,"message":"105","line":8,"column":3,"nodeType":"75","messageId":"76","endLine":8,"endColumn":12},{"ruleId":"73","severity":1,"message":"106","line":9,"column":3,"nodeType":"75","messageId":"76","endLine":9,"endColumn":7},{"ruleId":"73","severity":1,"message":"88","line":12,"column":10,"nodeType":"75","messageId":"76","endLine":12,"endColumn":25},{"ruleId":"73","severity":1,"message":"89","line":13,"column":10,"nodeType":"75","messageId":"76","endLine":13,"endColumn":24},{"ruleId":"73","severity":1,"message":"90","line":13,"column":26,"nodeType":"75","messageId":"76","endLine":13,"endColumn":35},{"ruleId":"73","severity":1,"message":"91","line":13,"column":37,"nodeType":"75","messageId":"76","endLine":13,"endColumn":47},{"ruleId":"73","severity":1,"message":"92","line":13,"column":49,"nodeType":"75","messageId":"76","endLine":13,"endColumn":59},{"ruleId":"73","severity":1,"message":"93","line":13,"column":61,"nodeType":"75","messageId":"76","endLine":13,"endColumn":68},{"ruleId":"73","severity":1,"message":"107","line":15,"column":13,"nodeType":"75","messageId":"76","endLine":15,"endColumn":15},{"ruleId":"73","severity":1,"message":"108","line":17,"column":5,"nodeType":"75","messageId":"76","endLine":17,"endColumn":15},{"ruleId":"73","severity":1,"message":"109","line":70,"column":9,"nodeType":"75","messageId":"76","endLine":70,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":115,"column":9,"nodeType":"112","messageId":"113","endLine":115,"endColumn":45},{"ruleId":"114","severity":1,"message":"115","line":186,"column":23,"nodeType":"116","messageId":"117","endLine":186,"endColumn":25},{"ruleId":"114","severity":1,"message":"118","line":197,"column":25,"nodeType":"116","messageId":"117","endLine":197,"endColumn":27},{"ruleId":"114","severity":1,"message":"118","line":198,"column":24,"nodeType":"116","messageId":"117","endLine":198,"endColumn":26},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'geneIndex' is assigned a value but never used.","'Box' is defined but never used.","'ButtonGroup' is defined but never used.","'Typography' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'CardContent' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faHospitalUser' is defined but never used.","'faFileAlt' is defined but never used.","'faUserPlus' is defined but never used.","'faUserEdit' is defined but never used.","'faUsers' is defined but never used.","'settings' is assigned a value but never used.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","no-whitespace-before-property","Unexpected whitespace before property attr.","MemberExpression","unexpectedWhitespace",{"range":"121","text":"122"},"'TextField' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'d3' is defined but never used.","'shaderInit' is defined but never used.","'counter' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",[7195,7197],"."]