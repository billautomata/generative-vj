[{"/Users/bill/webgl-vj-generative/src/index.js":"1","/Users/bill/webgl-vj-generative/src/App.js":"2","/Users/bill/webgl-vj-generative/src/reportWebVitals.js":"3","/Users/bill/webgl-vj-generative/src/generateFragmentShader.js":"4","/Users/bill/webgl-vj-generative/src/Interface.js":"5"},{"size":500,"mtime":1611016938116,"results":"6","hashOfConfig":"7"},{"size":6664,"mtime":1612395340616,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611016938117,"results":"9","hashOfConfig":"7"},{"size":5971,"mtime":1612221331189,"results":"10","hashOfConfig":"7"},{"size":10356,"mtime":1612394095120,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1z0qm92",{"filePath":"15","messages":"16","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"24","usedDeprecatedRules":"14"},"/Users/bill/webgl-vj-generative/src/index.js",[],["25","26"],"/Users/bill/webgl-vj-generative/src/App.js",["27","28","29","30","31","32","33","34","35","36","37","38","39"],"/Users/bill/webgl-vj-generative/src/reportWebVitals.js",[],"/Users/bill/webgl-vj-generative/src/generateFragmentShader.js",["40"],"let compoundArgumentsLength = 1\nlet genesLength = 128\nlet linesLength = 24\n\nlet currentDNAIndex = 0\nlet dna = []\nlet lineMetaData = []\n\nfor (let i = 0; i < genesLength; i++) {\n  dna.push(Math.floor(Math.random()*12))\n}\n\nconst sourceConfig = {\n  functions: [\n    { name: '', args: 1 }, \n    { name: 'sin', args: 1 },\n    { name: 'cos', args: 1 },\n    { name: 'tan', args: 1 },\n    { name: 'abs', args: 1 },\n    { name: 'fract', args: 1 }\n  ],\n  operatorsAssign: [\n    { name: '+=' },\n    { name: '-=' },\n    { name: '*=' },\n    { name: '=' },\n    { name: '/=' }\n  ],\n  operatorsSimple: [\n    { name: '*' },\n    { name: '+' },\n    { name: '-' },\n    { name: '/' }\n  ],\n  values: [\n    { name: 'red' },\n    { name: 'green' },\n    { name: 'blue' },\n    { name: 'timeMulti' },\n  ],\n  constantValues: [\n    { name: 'position.x' },\n    { name: 'position.y' },\n    { name: 'time' },\n    { name: 'time2' },\n    { name: 'time*timeMulti' },\n    { name: 'time/timeMulti' },\n    { name: 'distanceToCenter' },\n    { name: 'distanceToBottomLeft' },\n    { name: 'distanceToBottomRight' },\n    { name: 'distanceToTopLeft' },\n    { name: 'distanceToTopRight' },\n    { name: 'red' },\n    { name: 'green' },\n    { name: 'blue' },\n    { name: 'sin(time*0.001)'}\n  ]\n}\n\nlet functions = JSON.parse(JSON.stringify(sourceConfig.functions))\nlet operatorsAssign = JSON.parse(JSON.stringify(sourceConfig.operatorsAssign))\nlet operatorsSimple = JSON.parse(JSON.stringify(sourceConfig.operatorsSimple))\nlet values = JSON.parse(JSON.stringify(sourceConfig.values))\nlet constantValues = JSON.parse(JSON.stringify(sourceConfig.constantValues))\n\nfunction createLineDNA() {\n\n  const thisLineMetaData = {\n    begin: currentDNAIndex,\n    end: -1\n  }  \n\n  const leftGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  const operatorGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  const functionGene = dna[currentDNAIndex]\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log(currentDNAIndex)\n  \n  let valueLengthGene = (dna[currentDNAIndex] % compoundArgumentsLength) + 1\n  if(valueLengthGene % 2 === 0) {\n    valueLengthGene += 1\n  }\n  currentDNAIndex++\n  currentDNAIndex = currentDNAIndex % dna.length\n  // console.log('value length gene', valueLengthGene)\n  const valueGenes = []\n  for(let i = 0; i < valueLengthGene; i++) {\n    valueGenes.push(dna[currentDNAIndex])\n    currentDNAIndex++\n    thisLineMetaData.end = currentDNAIndex \n    currentDNAIndex = currentDNAIndex % dna.length\n  }\n\n  lineMetaData.push(thisLineMetaData)\n\n  return [\n    rDNA(values, leftGene).name,\n    rDNA(operatorsAssign, operatorGene).name,\n    rDNA(functions, functionGene).name + '(',\n    createCompoundValueDNA(valueGenes),\n    ');'\n  ].join(' ')\n}\n\nfunction createCompoundValueDNA(genes) {\n  let geneIndex = 0\n  const values = []\n  // console.log('genes length', genes.length)\n  while(genes.length > 0) {\n    if(genes.length >= 2) {\n      values.push(\n        [\n          rDNA(constantValues,genes.pop()).name, \n          rDNA(operatorsSimple,genes.pop()).name\n        ].join(' ')\n      )\n    } else {\n      values.push(rDNA(constantValues, genes.pop()).name)\n    }  \n  }\n  return values.join(' ')\n}\n\nfunction rDNA(arr, value) {\n  // console.log('array length', arr.length, 'asked index', value, 'computed index', value%arr.length)\n  return arr[value%(arr.length)]\n}\n\nfunction resetLineMetaData () {\n  lineMetaData = []\n}\n\nfunction generateFragmentShader() {\n  currentDNAIndex = 0\n  resetLineMetaData()\n\n  const lines = []\n  lines.push('uniform float time;')\n  lines.push('uniform vec2 resolution;')\n  lines.push('void main ( void ) {')\n  lines.push('vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;')\n  lines.push('vec2 centerPosition = vec2(resolution.x*0.5, resolution.y*0.5);')\n  lines.push('float distanceToCenter = (1.0/resolution.x) * 3.14 * distance(gl_FragCoord.xy, centerPosition);')\n  lines.push('float distanceToTopLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,0));')\n  lines.push('float distanceToTopRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(resolution.x,0));')\n  lines.push('float distanceToBottomLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,resolution.y));')\n  lines.push('float distanceToBottomRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, resolution.xy);')  \n  lines.push('float timeMulti = 0.0;')\n  lines.push('float time2 = time * 0.1;')\n  lines.push('float red = 0.0;')\n  lines.push('float green = 0.0;')\n  lines.push('float blue = 0.0;')\n\n  lineMetaData.lineBegin = lines.length\n\n  for(let i = 0; i < linesLength; i++) {\n    lines.push(createLineDNA())\n  }\n\n  lines.push('gl_FragColor = vec4( red, green, blue, 1.0 );')\n  lines.push('}')\n\n  const displayLines = []\n  lines.forEach((line,lineIndex)=>{\n    displayLines.push([lineIndex,line].join('\\t'))\n  })\n  // console.log(displayLines.join('\\n'))\n  // console.log(lineMetaData)\n\n  return lines.join('\\n')\n\n}\n\nfunction setDNA(options) {\n  dna = []\n  currentDNAIndex = 0\n  options.data.forEach(d=>{\n    dna.push(d)\n  })\n}\nfunction configure(options) {\n  linesLength = options.linesLength\n}\nfunction getLineMetaData() {\n  return lineMetaData\n}\nfunction getConfig () {\n  return {\n    linesLength,\n    functions,\n    operatorsAssign,\n    operatorsSimple,\n    values,\n    constantValues\n  }\n}\nfunction setConfig (config) {\n  linesLength = config.linesLength\n  functions = JSON.parse(JSON.stringify(config.functions))\n  operatorsAssign = JSON.parse(JSON.stringify(config.operatorsAssign))\n  operatorsSimple = JSON.parse(JSON.stringify(config.operatorsSimple))\n  values = JSON.parse(JSON.stringify(config.values))\n  constantValues = JSON.parse(JSON.stringify(config.constantValues))\n}\n\nexport {\n  configure,\n  generateFragmentShader,\n  setDNA,\n  getLineMetaData,\n  getConfig,\n  setConfig\n}","/Users/bill/webgl-vj-generative/src/Interface.js",["41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56"],"import React from 'react'\nimport * as d3 from 'd3'\nimport { svg } from 'd3'\n\nimport { \n  Box, Button, ButtonGroup,\n  TextField, Typography, \n  Card, CardHeader, CardContent,\n  Container,\n  Grid\n} from '@material-ui/core'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHospitalUser, faFileAlt, faUserPlus, faUserEdit, faUsers } from '@fortawesome/free-solid-svg-icons'\n\nconst LOCAL_STORAGE_KEY = 'COOKIE_VJ_SETTINGS'\n\nexport default class Interface extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.svgRef = React.createRef()\n    this.state = {\n      shaderLines: '',\n      matchingCodeLines: [],\n      showBits: false,\n      showCode: false\n    }\n    this.bitRate = 4\n    this.geneSize = 64\n    this.bits = d3.range(this.bitRate * this.geneSize).map(o=>{\n      return Math.random() > 0.5 ? 1 : 0\n    })\n\n    this.convertBits = this.convertBits.bind(this)\n    this.generateRandom = this.generateRandom.bind(this)\n    this.readStoredSettings = this.readStoredSettings.bind(this)\n    this.writeStoredSettings = this.writeStoredSettings.bind(this)\n\n    this.saveSettings = this.saveSettings.bind(this)\n    this.readStoredSettings = this.readStoredSettings.bind(this)\n    this.loadConfiguration = this.loadConfiguration.bind(this)\n\n    this.saveNameRef = React.createRef()\n\n  }\n\n  saveSettings () {\n    const o = {\n      name: this.saveNameRef.current.value,\n      bitRate: this.bitRate,\n      bits: this.bits,\n      config: this.props.fns.getConfig()\n    }\n    console.log(o)\n    this.writeStoredSettings(this.readStoredSettings().push(o))\n  }\n\n  readStoredSettings () {\n    const o = window.localStorage.getItem(LOCAL_STORAGE_KEY)\n    if(o === null) {\n      return []\n    } else {\n      try {\n        const p = JSON.parse(o)\n        return p\n      } catch (e) {\n        return []\n      }\n    }\n  }\n\n  writeStoredSettings (settings) {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(settings))\n  }\n\n  loadConfiguration (index) {\n    const settings = this.readStoredSettings()\n    window.shaderInit(this.props.fns.generateFragmentShader())    \n    this.setState({\n      shaderLines: this.props.fns.generateFragmentShader()\n    })        \n  }\n\n  convertBits () {\n    const bytes = []\n    for(let i = 0; i < this.geneSize*this.bitRate; i+=this.bitRate) {\n      const bitArray = d3.range(this.bitRate).map(offset=>{ return this.bits[i+offset] })\n      // console.log(bitArray)\n      bytes.push(parseInt(bitArray.join(''),2))\n    }\n    // console.log('bytes', bytes)\n    return bytes\n  }\n\n  generateRandom () {\n    this.bits = d3.range(this.bitRate * this.geneSize).map(o=>{\n      return Math.random() > 0.5 ? 1 : 0\n    })\n    this.props.fns.setDNA({data:this.convertBits()})\n    window.shaderInit(this.props.fns.generateFragmentShader())\n    this.setState({\n      shaderLines: this.props.fns.generateFragmentShader(),\n      matchingCodeLines: []\n    })\n    d3.select(this.svgRef.current).select('g').selectAll('rect').attr('fill', d=>{\n      return this.bits[d.idx] === 1 ? 'white' : 'black'\n    }).attr('stroke','none')\n  }\n\n  componentDidMount () {\n    console.log('interface mounted')\n    const dimensions = 100\n    const svg = d3.select(this.svgRef.current)\n      .attr('viewBox', '0 0 '+[dimensions,dimensions].join(' '))\n      .attr('width', window.innerHeight*0.8)\n    const gridSize = Math.ceil(Math.sqrt(this.bits.length)) \n    const boxSize = dimensions / gridSize\n    const g = svg.append('g')\n    const drag = d3.drag()\n    \n    let dragFlipped = []\n    drag.on('drag', (event)=>{\n      // console.log('drag event', event.x, event.y)\n      const x = Math.floor(event.x / boxSize)\n      const y = Math.floor(event.y / boxSize)\n      const index = (y*gridSize) + x\n      // console.log(x,y)\n      // if(dragFlipped.indexOf(index) === -1) {\n      if(dragFlipped[dragFlipped.length-1] !== index) {\n        dragFlipped.push(index)\n        if(this.bits[index] === 1) {\n          this.bits[index] = 0\n        } else {\n          this.bits[index] = 1\n        }\n        g.select('rect#_'+index).attr('fill', this.bits[index] === 1 ? 'white' : 'black')      \n        this.props.fns.setDNA({data:this.convertBits()})\n        window.shaderInit(this.props.fns.generateFragmentShader())    \n        this.setState({\n          shaderLines: this.props.fns.generateFragmentShader()\n        })    \n      }\n    })\n    \n    drag.on('start', (event)=>{\n      dragFlipped = []\n    })\n    g.call(drag)\n\n    // generate rectangles\n    let x = 0\n    let y = 0\n    this.bits.forEach((bit,bitIndex)=>{     \n      y = Math.floor(bitIndex / gridSize) \n      x = bitIndex - (y*gridSize)\n      const rect = g.append('rect').attr('id', '_'+bitIndex)\n        .datum({idx: bitIndex})\n        .attr('x',x*boxSize).attr('y',y*boxSize)\n        .attr('width', boxSize).attr('height', boxSize)\n        .attr('fill', bit === 1 ? 'white' : 'black')      \n        // .attr('stroke','green')\n        .attr('stroke-width','0.5px')\n\n      rect.on('mouseover', ()=>{      \n        const geneIndex = Math.floor(bitIndex / this.bitRate)\n        console.log('Gene index', geneIndex)\n        const metadata = this.props.fns.getLineMetaData().map((o,idx)=>{o.idx = idx; return o})        \n        console.log(metadata)\n        const matchingResults = metadata.filter(o=>{ return geneIndex >= o.begin && geneIndex <= o.end })\n        console.log(matchingResults)\n\n        this.setState({\n          matchingCodeLines: matchingResults.map(o=>{return o.idx})\n        })\n\n      })\n\n      rect.on('click', ()=>{\n        return\n        if(this.bits[bitIndex] === 1){\n          this.bits[bitIndex] = 0\n        } else {\n          this.bits[bitIndex] = 1\n        }\n        // convertBits\n        // this.props.setDNA({ data: this.bits })\n        // this.convertBits()\n        rect.attr('fill', this.bits[bitIndex] === 1 ? 'white' : 'black')      \n        this.props.fns.setDNA({data:this.convertBits()})\n        window.shaderInit(this.props.fns.generateFragmentShader())\n      })\n      x += 1\n      if(x > gridSize) {\n        y += 1\n        x = 0\n      }  \n    })\n\n    setTimeout(()=>{\n      this.props.fns.setDNA({data:this.convertBits()})\n      window.shaderInit(this.props.fns.generateFragmentShader())\n      this.setState({\n        shaderLines: this.props.fns.generateFragmentShader()\n      })  \n    },10)\n  }\n\n  render () {\n    const metadata = this.props.fns.getLineMetaData()\n    const shaderLines = this.state.shaderLines.split('\\n').map((o,lineIdx)=>{\n      return (\n        <div \n        onClick={ () => {\n          const p = metadata[lineIdx - metadata.lineBegin]\n          // console.log(p)\n          if(p === undefined) {\n            return\n          }\n          if(p.end > p.begin) {\n            const svg = d3.select(this.svgRef.current)\n            d3.range((p.end-p.begin)*this.bitRate).forEach(n=>{\n              console.log(n, p.begin, n+(p.begin*this.bitRate))\n              const rectIndex = (n+(p.begin*this.bitRate))\n              this.bits[rectIndex] = Math.random() > 0.5 ? 1 : 0                \n              svg.select('rect#_'+rectIndex) .attr('fill', this.bits[rectIndex] === 1 ? 'white' : 'black')   \n            })\n            this.props.fns.setDNA({data:this.convertBits()})\n            window.shaderInit(this.props.fns.generateFragmentShader())    \n            this.setState({\n              shaderLines: this.props.fns.generateFragmentShader()\n            })        \n          } else {\n            console.log('wrap around issue')\n          }\n\n        } }\n        onMouseOver={ () => { \n          // console.log(metadata.lineBegin, lineIdx)\n          this.setState({\n            matchingCodeLines: [lineIdx - metadata.lineBegin]\n          })\n          d3.select(this.svgRef.current).selectAll('rect').attr('stroke', 'none')\n          const p = metadata[lineIdx - metadata.lineBegin]\n          // console.log(p)\n          if(p === undefined) {\n            return\n          }\n          if(p.end > p.begin) {\n            d3.range((p.end-p.begin)*this.bitRate).forEach(n=>{\n              console.log(n, p.begin, n+(p.begin*this.bitRate))\n              const rectIndex = (n+(p.begin*this.bitRate)) \n              d3.select(this.svgRef.current).select('rect#_'+rectIndex).attr('stroke', 'orange')\n            })\n          } else {\n            console.log('wrap around issue')\n          }\n        } }\n        style={{\n          outline: this.state.matchingCodeLines.indexOf(lineIdx - metadata.lineBegin) !== -1 ? '1px solid white' : null,\n          cursor: 'pointer'\n        }}>\n          {o}\n        </div>\n      )\n    })\n\n    return (\n      <>\n      <div style={{ \n        position: 'absolute', top: 0, left: 0, \n        opacity: 1, backgroundColor: 'rgba(0,0,0,0)', \n        padding: '10px',\n        width: '100%' }}>\n        <Grid container spacing={1} alignItems='center' justify='flex-start'>\n          <Grid item style={{width: '160px'}}><Button fullWidth color='default' variant='contained' onClick={()=>{this.setState({showBits: !this.state.showBits})}}>{this.state.showBits ? 'Hide' : 'Show'} DNA</Button></Grid>\n          <Grid item style={{width: '160px'}}><Button fullWidth color='default' variant='contained' onClick={()=>{this.setState({showCode: !this.state.showCode})}}>{this.state.showCode ? 'Hide' : 'Show'} Code</Button></Grid>\n          <Grid item><Button color='default' variant='contained' onClick={this.generateRandom}>Random</Button></Grid>\n          <Grid item><Button color='default' variant='contained' onClick={this.generateRandom}>Reset</Button></Grid>\n          <Grid item><Button color='default' variant='contained' onClick={this.saveSettings}>Save</Button></Grid>                      \n          <Grid item><TextField inputRef={this.saveNameRef} variant='outlined' size='small' fullWidth></TextField></Grid>\n        </Grid>\n        <svg ref={this.svgRef} style={{marginTop: 10, display: this.state.showBits ? null : 'none',}}/>\n      </div>\n      <div style={{ display: this.state.showCode ? null : 'none', position: 'absolute', top: 0, right: 0, opacity: 1, backgroundColor: 'rgba(0,0,0,0)', width: '50%' }}>\n        <div style={{\n          padding: '10px',\n          color: '#333', \n          fontFamily: 'monospace', \n          whiteSpace: 'nowrap', \n          backgroundColor: 'rgba(255,255,255,0.6)'}}>\n          {shaderLines}\n        </div>\n      </div> \n      </>\n    )\n  }\n}",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":4,"column":17,"nodeType":"63","messageId":"64","endLine":4,"endColumn":23},{"ruleId":"61","severity":1,"message":"65","line":5,"column":3,"nodeType":"63","messageId":"64","endLine":5,"endColumn":9},{"ruleId":"61","severity":1,"message":"66","line":6,"column":3,"nodeType":"63","messageId":"64","endLine":6,"endColumn":8},{"ruleId":"61","severity":1,"message":"67","line":7,"column":3,"nodeType":"63","messageId":"64","endLine":7,"endColumn":7},{"ruleId":"61","severity":1,"message":"68","line":10,"column":10,"nodeType":"63","messageId":"64","endLine":10,"endColumn":24},{"ruleId":"61","severity":1,"message":"69","line":11,"column":10,"nodeType":"63","messageId":"64","endLine":11,"endColumn":23},{"ruleId":"61","severity":1,"message":"70","line":30,"column":7,"nodeType":"63","messageId":"64","endLine":30,"endColumn":21},{"ruleId":"61","severity":1,"message":"71","line":53,"column":7,"nodeType":"63","messageId":"64","endLine":53,"endColumn":22},{"ruleId":"72","severity":1,"message":"73","line":68,"column":3,"nodeType":"74","messageId":"75","endLine":70,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":122,"column":9,"nodeType":"78","messageId":"79","endLine":122,"endColumn":45},{"ruleId":"80","severity":1,"message":"81","line":190,"column":23,"nodeType":"82","messageId":"83","endLine":190,"endColumn":25},{"ruleId":"80","severity":1,"message":"84","line":201,"column":25,"nodeType":"82","messageId":"83","endLine":201,"endColumn":27},{"ruleId":"80","severity":1,"message":"84","line":202,"column":24,"nodeType":"82","messageId":"83","endLine":202,"endColumn":26},{"ruleId":"61","severity":1,"message":"85","line":113,"column":7,"nodeType":"63","messageId":"64","endLine":113,"endColumn":16},{"ruleId":"61","severity":1,"message":"86","line":6,"column":3,"nodeType":"63","messageId":"64","endLine":6,"endColumn":6},{"ruleId":"61","severity":1,"message":"87","line":6,"column":16,"nodeType":"63","messageId":"64","endLine":6,"endColumn":27},{"ruleId":"61","severity":1,"message":"88","line":7,"column":14,"nodeType":"63","messageId":"64","endLine":7,"endColumn":24},{"ruleId":"61","severity":1,"message":"89","line":8,"column":3,"nodeType":"63","messageId":"64","endLine":8,"endColumn":7},{"ruleId":"61","severity":1,"message":"90","line":8,"column":9,"nodeType":"63","messageId":"64","endLine":8,"endColumn":19},{"ruleId":"61","severity":1,"message":"91","line":8,"column":21,"nodeType":"63","messageId":"64","endLine":8,"endColumn":32},{"ruleId":"61","severity":1,"message":"92","line":9,"column":3,"nodeType":"63","messageId":"64","endLine":9,"endColumn":12},{"ruleId":"61","severity":1,"message":"93","line":13,"column":10,"nodeType":"63","messageId":"64","endLine":13,"endColumn":25},{"ruleId":"61","severity":1,"message":"94","line":14,"column":10,"nodeType":"63","messageId":"64","endLine":14,"endColumn":24},{"ruleId":"61","severity":1,"message":"95","line":14,"column":26,"nodeType":"63","messageId":"64","endLine":14,"endColumn":35},{"ruleId":"61","severity":1,"message":"96","line":14,"column":37,"nodeType":"63","messageId":"64","endLine":14,"endColumn":47},{"ruleId":"61","severity":1,"message":"97","line":14,"column":49,"nodeType":"63","messageId":"64","endLine":14,"endColumn":59},{"ruleId":"61","severity":1,"message":"98","line":14,"column":61,"nodeType":"63","messageId":"64","endLine":14,"endColumn":68},{"ruleId":"61","severity":1,"message":"99","line":78,"column":11,"nodeType":"63","messageId":"64","endLine":78,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":181,"column":9,"nodeType":"102","messageId":"103","endLine":191,"endColumn":67},{"ruleId":"104","severity":1,"message":"105","line":226,"column":15,"nodeType":"106","messageId":"107","endLine":226,"endColumn":51,"fix":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'createMuiTheme' is defined but never used.","'ThemeProvider' is defined but never used.","'fragmentShader' is assigned a value but never used.","'fragmentShader2' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'geneIndex' is assigned a value but never used.","'Box' is defined but never used.","'ButtonGroup' is defined but never used.","'Typography' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'CardContent' is defined but never used.","'Container' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faHospitalUser' is defined but never used.","'faFileAlt' is defined but never used.","'faUserPlus' is defined but never used.","'faUserEdit' is defined but never used.","'faUsers' is defined but never used.","'settings' is assigned a value but never used.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","no-whitespace-before-property","Unexpected whitespace before property attr.","MemberExpression","unexpectedWhitespace",{"range":"111","text":"112"},"no-global-assign","no-unsafe-negation",[7080,7082],"."]