[{"/Users/bill/webgl-vj-generative/src/index.js":"1","/Users/bill/webgl-vj-generative/src/App.js":"2","/Users/bill/webgl-vj-generative/src/reportWebVitals.js":"3","/Users/bill/webgl-vj-generative/src/generateFragmentShader.js":"4"},{"size":500,"mtime":1611016938116,"results":"5","hashOfConfig":"6"},{"size":5862,"mtime":1611080111379,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611016938117,"results":"8","hashOfConfig":"6"},{"size":2753,"mtime":1611080061711,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1z0qm92",{"filePath":"13","messages":"14","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/bill/webgl-vj-generative/src/index.js",[],["21","22"],"/Users/bill/webgl-vj-generative/src/App.js",["23","24","25","26","27","28","29","30","31"],"import React from 'react'\nimport logo, { ReactComponent } from './logo.svg';\nimport './App.css';\n\nimport generateFragmentShader from './generateFragmentShader.js'\n\nconst vertexShader = `\n\nattribute vec3 position;\nvoid main() {\n  gl_Position = vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\n\nuniform float time;\nuniform vec2 resolution; \nvoid main( void ) { \n  vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;\n  float red = abs( sin( position.x * position.y + time / 5.0 ) );\n  float green = abs( sin( position.x * position.y + time / 4.0 ) );\n  float blue = abs( sin( position.x * position.y + time / 3.0 ) );\n  gl_FragColor = vec4( red, green, blue, 1.0 );\n} \n`\n\nconst fragmentShader2 = `\n\nuniform float time;\nuniform vec2 resolution; \nvoid main( void ) { \n  vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;\n  float red = abs( sin( position.x * position.y + time / .10 ) );\n  float green = abs( sin( position.x * position.y + time / .30 ) );\n  float blue = abs( sin( position.x * position.y + time / .20 ) );\n  gl_FragColor = vec4( red, green, blue, 1.0 );\n} \n`\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n  }\n\n  componentDidMount () {\n\n    window.requestAnimationFrame = window.requestAnimationFrame || ( function() {\n\n      return  window.webkitRequestAnimationFrame ||\n              window.mozRequestAnimationFrame ||\n              window.oRequestAnimationFrame ||\n              window.msRequestAnimationFrame ||\n              function(  callback, element ) {\n                window.setTimeout( callback, 1000 / 60 );\n              };\n\n    })();\n\n    var canvas, \n        gl, \n        buffer, \n        vertex_shader, fragment_shader, \n        currentProgram,\n        vertex_position,\n        timeLocation,\n        resolutionLocation,\n        parameters = {  start_time  : new Date().getTime(), \n                        time        : 0, \n                        screenWidth : 0, \n                        screenHeight: 0 };\n\n    init(generateFragmentShader());\n\n    setInterval(()=>{\n      init(generateFragmentShader())\n    },2500)\n    animate();\n\n    function init(fragmentShader) {\n\n      console.log(fragmentShader)\n\n      vertex_shader = vertexShader\n      fragment_shader = fragmentShader\n\n      canvas = document.querySelector( 'canvas' );\n\n      // Initialise WebGL\n\n      try {\n\n        gl = canvas.getContext( 'experimental-webgl' );\n\n      } catch( error ) { }\n\n      if ( !gl ) {\n\n        throw \"cannot create webgl context\";\n\n      }\n\n      // Create Vertex buffer (2 triangles)\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n      gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( [ - 1.0, - 1.0, 1.0, - 1.0, - 1.0, 1.0, 1.0, - 1.0, 1.0, 1.0, - 1.0, 1.0 ] ), gl.STATIC_DRAW );\n\n      // Create Program\n\n      currentProgram = createProgram( vertex_shader, fragment_shader );\n\n      timeLocation = gl.getUniformLocation( currentProgram, 'time' );\n      resolutionLocation = gl.getUniformLocation( currentProgram, 'resolution' );\n\n    }\n\n    function createProgram( vertex, fragment ) {\n\n      var program = gl.createProgram();\n\n      var vs = createShader( vertex, gl.VERTEX_SHADER );\n      var fs = createShader( '#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\n' + fragment, gl.FRAGMENT_SHADER );\n\n      if ( vs == null || fs == null ) { \n        console.log(vs,fs)\n        return null;\n      }\n\n      console.log(vs)\n\n      gl.attachShader( program, vs );\n      gl.attachShader( program, fs );\n\n      gl.deleteShader( vs );\n      gl.deleteShader( fs );\n\n      gl.linkProgram( program );\n\n      if ( !gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\n\n        alert( \"ERROR:\\n\" +\n        \"VALIDATE_STATUS: \" + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + \"\\n\" +\n        \"ERROR: \" + gl.getError() + \"\\n\\n\" +\n        \"- Vertex Shader -\\n\" + vertex + \"\\n\\n\" +\n        \"- Fragment Shader -\\n\" + fragment );\n\n        return null;\n\n      }\n\n      return program;\n\n    }\n\n    function createShader( src, type ) {\n\n      var shader = gl.createShader( type );\n\n      gl.shaderSource( shader, src );\n      gl.compileShader( shader );\n\n      if ( !gl.getShaderParameter( shader, gl.COMPILE_STATUS ) ) {\n\n        alert( ( type == gl.VERTEX_SHADER ? \"VERTEX\" : \"FRAGMENT\" ) + \" SHADER:\\n\" + gl.getShaderInfoLog( shader ) );\n        return null;\n\n      }\n\n      return shader;\n\n    }\n\n    function resizeCanvas( event ) {\n\n      if ( canvas.width != canvas.clientWidth ||\n         canvas.height != canvas.clientHeight ) {\n\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n\n        parameters.screenWidth = canvas.width;\n        parameters.screenHeight = canvas.height;\n\n        gl.viewport( 0, 0, canvas.width, canvas.height );\n\n      }\n\n    }\n\n    function animate() {\n\n      resizeCanvas();\n      render();\n      requestAnimationFrame( animate );\n\n    }\n\n    function render() {\n      \n      if ( !currentProgram ) return;\n\n      parameters.time = new Date().getTime() - parameters.start_time;\n\n      gl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT );\n\n      // Load program into GPU\n\n      gl.useProgram( currentProgram );\n\n      // Set values to program variables\n\n      gl.uniform1f( timeLocation, parameters.time / 1000 );\n      gl.uniform2f( resolutionLocation, parameters.screenWidth, parameters.screenHeight );\n\n      // Render geometry\n\n      gl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n      gl.vertexAttribPointer( vertex_position, 2, gl.FLOAT, false, 0, 0 );\n      gl.enableVertexAttribArray( vertex_position );\n      gl.drawArrays( gl.TRIANGLES, 0, 6 );\n      gl.disableVertexAttribArray( vertex_position );\n\n    }    \n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n         <canvas></canvas>\n        <div id=\"info\"></div> \n      </div>\n    );\n  }\n\n}\n\n\nexport default App","/Users/bill/webgl-vj-generative/src/reportWebVitals.js",[],"/Users/bill/webgl-vj-generative/src/generateFragmentShader.js",["32"],"const compoundArgumentsLength = 2\n\nconst functions = [\n  { name: 'sin', args: 1 },\n  { name: 'cos', args: 1 },\n  // { name: 'tan', args: 1 },\n  { name: 'abs', args: 1 },\n  { name: 'fract', args: 1 }\n]\n\nconst operatorsAssign = [\n  { name: '=' },\n  { name: '+=' },\n  { name: '-=' },\n  { name: '*=' },\n  // { name: '/=' }\n]\n\nconst operatorsSimple = [\n  { name: '*' },\n  { name: '+' },\n  { name: '-' },\n  { name: '/' }\n]\n\nconst values = [\n  { name: 'red' },\n  { name: 'green' },\n  { name: 'blue' },\n  { name: 'timeMulti' },\n]\n\nconst constantValues = [\n  { name: 'position.x' },\n  { name: 'position.y' },\n  { name: 'time' },\n  { name: 'time*timeMulti' },\n  { name: 'time/timeMulti' },\n  { name: 'distanceToCenter' },\n  { name: 'distanceToBottomLeft' },\n  { name: 'distanceToBottomRight' },\n  { name: 'distanceToTopLeft' },\n  { name: 'distanceToTopRight' },\n  { name: 'red' },\n  { name: 'green' },\n  { name: 'blue' },\n]\n\nfunction createLine() {\n  return [\n    r(values).name,\n    r(operatorsAssign).name,\n    r(functions).name + '(',\n    createCompoundValue(1+Math.floor(Math.random()*compoundArgumentsLength)),\n    ');'\n  ].join(' ')\n}\n\nfunction createCompoundValue(n) {\n  const values = []\n  for(let i = 0; i < n; i++) {\n    if(i !== n-1) {\n      values.push([r(constantValues).name, r(operatorsSimple).name].join(' '))\n    } else {\n      values.push(r(constantValues).name)\n    }    \n  }\n  return values.join(' ')\n}\n\nfunction r(arr) {\n  return arr[Math.floor(Math.random()*arr.length)]\n}\n\nexport default function () {\n\n  console.log(createLine())\n\n  const lines = []\n  lines.push('uniform float time;')\n  lines.push('uniform vec2 resolution;')\n  lines.push('void main ( void ) {')\n  lines.push('vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;')\n  lines.push('vec2 centerPosition = vec2(resolution.x*0.5, resolution.y*0.5);')\n  lines.push('float distanceToCenter = (1.0/resolution.x) * 3.14 * distance(gl_FragCoord.xy, centerPosition);')\n  lines.push('float distanceToTopLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,0));')\n  lines.push('float distanceToTopRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(resolution.x,0));')\n  lines.push('float distanceToBottomLeft = (1.0/resolution.x) * distance(gl_FragCoord.xy, vec2(0,resolution.y));')\n  lines.push('float distanceToBottomRight = (1.0/resolution.x) * distance(gl_FragCoord.xy, resolution.xy);')  \n  lines.push('float timeMulti = 0.0;')\n  lines.push('float red = 0.0;')\n  lines.push('float green = 0.0;')\n  lines.push('float blue = 0.0;')\n\n  for(let i = 0; i < 30; i++) {\n    lines.push(createLine())\n  }\n  // lines.push('red = sin(distanceToCenter);')\n  lines.push('gl_FragColor = vec4( red, green, blue, 1.0 );')\n  lines.push('}')\n\n  return lines.join('\\n')\n\n}",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":12},{"ruleId":"37","severity":1,"message":"41","line":2,"column":16,"nodeType":"39","messageId":"40","endLine":2,"endColumn":30},{"ruleId":"37","severity":1,"message":"42","line":15,"column":7,"nodeType":"39","messageId":"40","endLine":15,"endColumn":21},{"ruleId":"37","severity":1,"message":"43","line":28,"column":7,"nodeType":"39","messageId":"40","endLine":28,"endColumn":22},{"ruleId":"44","severity":1,"message":"45","line":43,"column":3,"nodeType":"46","messageId":"47","endLine":46,"endColumn":4},{"ruleId":"48","severity":1,"message":"49","line":101,"column":9,"nodeType":"50","messageId":"51","endLine":101,"endColumn":45},{"ruleId":"52","severity":1,"message":"53","line":167,"column":23,"nodeType":"54","messageId":"55","endLine":167,"endColumn":25},{"ruleId":"52","severity":1,"message":"56","line":178,"column":25,"nodeType":"54","messageId":"55","endLine":178,"endColumn":27},{"ruleId":"52","severity":1,"message":"56","line":179,"column":24,"nodeType":"54","messageId":"55","endLine":179,"endColumn":26},{"ruleId":"57","severity":1,"message":"58","line":75,"column":1,"nodeType":"59","endLine":104,"endColumn":2},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactComponent' is defined but never used.","'fragmentShader' is assigned a value but never used.","'fragmentShader2' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]